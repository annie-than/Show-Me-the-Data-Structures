Explanation for Project: Show Me the Data Structures
====================================================


1. Problem 1: LRU Cache
   ---------------------
The requirement is Problem 1 is that all operations must take O(1) time.
So, I use hashtable for fast looking up and dual linked list to quick add/remove nodes. 

- Get function: It first looks up "key" in the hashtable to find node, and time complexity of this operation is O(1). Then, it remove/add node in the doubly linked list, and the time complexity of this operation is also O(1). That's why these operations take O(1) time.

- Set function. It works the same way, so also taking O(1) time.

For space complexity, it would depend on the capacity of the cache. This is because the number of elements in the hashtable is not constant and in worst-case would be equal to the capacity of the cache. So it should be O(n) where 'n' is the capacity of the cache.


2. Problem 2: File Recursion
   -------------------------
I apply recursion in Problem 2, and time complexity of the worst case is O(h*n).
The design is as a tree data struture. Files act as leaves and directories act as internal nodes. The algorithm basically traverses the entire tree. 
In this problem, n implies the length of input or  (in this case => my_list). Each operation will take O(h) time to run where h is the length of input of recursion calls.

Space complexity in this problem is also O(h*n). I call "n" as the length of input (in this case => my_list). In each item of the for loop, the algorithm uses a fixed (small) amount of space for assignment or calling print function; so it would take O(n) space in the best case. However, in the worst case, the algorithm call recursion and it did the same for sub-directories and take O(h) space. That's why space complexity in this problem is O(h*n)


3. Problem 3: Huffman Coding
   -------------------------
In this problem, I use dictionary to store frequency of character as well binary code assigned.
I use to tuple and list for buiding huffman tree.

- Encoding:
In this function, it gets codes from "huffman_code" function that call back to "huffman_trim", "huffman_tree", "freq_sort", "freq_dict" function. In these functions, they use for loop, while loop and sorting. Time complexity of the worst case in Timsort is O(nlog(n)).

For encoding- the space is occupied mainly by the number of unique characters for the encoding function because the frequency dictionary has the size of that of number of unique characters. So the space complexity should be O(n), where 'n' is the number of unique characters in input string.

- Decoding:
In this function, it needs a tree from "huffman_tree" which calls back to "freq_sort", "freq_dict" function. In these functions, they use for loop, while loop and sorting. Time complexity of the worst case in Timsort is O(nlog(n)).

For decoding- the space complexity in worst-case will be equal to the total number of characters in the input string because it is what's formed here and returned. So the space complexity should be O(n), where 'n' is the total number of characters in input string.


4. Problem 4: Active Directory
   ---------------------------
The design is as a tree data struture. Users act as leaves and groups act as internal nodes. The algorithm basically traverses the tree. we are visiting nodes and stop the traversal if a match is found. In the worst case, all the nodes are visited. So n implies the length of input (in this case => group.get_groups()). In each recursion call, it will check again user, call len() function and go to the sub group; so it will take O(h) time to execute.
Therefore, time complexity of the worst case is O(h*n).


In the best case, if user a match is found in the first checking condition, space complexity will be O(1). In the worst case, this algorithm will traverses the entire tree, so the call stack would take (n * h) amount of space. Therefore, space complexity of the worst case is O(h*n).

5. Problem 5: Blockchain
   ---------------------
I use linked list in Problem 5 and time complexity of the worst case is O(n)
In add_block() and print_chain(), it will take all the length of chain (length = n) to be done in the worst case, so time complexity is O(n).

The space complexity depends on the number of blocks in the block chain because for each block a new node is created. So it will be O(n) where 'n' represents the size of the block chain or in other words, the number of blocks in the block chain.


6. Problem 6: Union and Intersection
   ---------------------------------
Linked list is use in this problem. In the worst case, it needs to go all along the linked list, so the time complexity here would be O(n). I use the same alogrithm for both union and intersec, so they both have O(n). 

Space complexity for both union and intersec in this problem are also O(n). 
For union- 'n' would mean the total number of elements in the two linked lists combined in worst-case.
For intersection- 'n' would mean the total number of elements in the shorter linked list because the worst-case would be when one of the lists would be a sublist of the other.

 
